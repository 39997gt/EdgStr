/**
    Edge-Replica
**/

const express = require('express');
const bodyParser = require('body-parser');
const compression = require('compression');
const cors = require('cors');


const Automerge = require('automerge')
const fs = require('fs');
const io = require("socket.io-client");
const ioClient = io.connect("http://127.0.0.1:5010");

const app = express();
const CLOUD_URL_PORT = "{{CLOUD_URL_PORT}}";
app.set('port', process.env.PORT || 5000);
var proxy = require('express-http-proxy');
app.use(cors());
app.use(bodyParser.json());
app.use(compression());

//Rules for forwarding or Processing
app.all("*", proxy(CLOUD_URL_PORT, {
        filter: function (req, res){
                return
                {{#each services}}
                    {{#if @last}} !({{{rule}}});
                    {{else}} !({{{rule}}}) &&
                    {{/if}}
                {{/each}}

    }}
));

//Listening Cloud's synchronization msgs
ioClient.on("syncToEdge", (msg) => {
	e_ref_states = Automerge.applyChanges(e_ref_states, JSON.parse(msg));
});

{{#each dep_stmts}}
{{{../dep_stmts}}}
{{/each}}

//Initialize CRDTs
var e_ref_states = Automerge.load(fs.readFileSync("{{snapshot}}", "utf8"));

{{#each services}}
/** @Extracted-function
    {{{ftn_stmts}}}
**/
app.{{method}}('{{path}}',function (req,res,next){
  try {
       var output;
       var new_states = Automerge.change(e_ref_states, 'edge', _states => {
            {{{nested_ftn_stmts}}}

       });

        let changes = Automerge.getChanges(e_ref_states, new_states);
        if(changes.length>0) {//Updating Cloud's state
            ioClient.emit("SyncToCloud", JSON.stringify(changes));
            e_ref_states = new_states;
        }
        if (typeof output == 'undefined') throw "undefined error";
    	    res.json(output);
  }
  catch(err) {
        console.log(err);
        res.redirect(CLOUD_URL_PORT+'{{path}}');
  }

});

{{/each}}
app.listen(app.get('port'), function () {
    console.log('Server listening on port ' + app.get('port'));
});